# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: backend-sls
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name
plugins:
  - serverless-go-build

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
frameworkVersion: '>=1.28.0 <2.0.0'

provider:
  name: aws
  runtime: go1.x
  stage: ${opt:stage, 'dev'}
  environment:
    TABLE_NAME: 'api-creator-${self:provider.stage}'
    BUCKET_NAME: 'api-creator-generated-code-${self:provider.stage}'
    CORS_ORIGIN: ${self:custom.origin.${self:provider.stage}}
    DEPLOYMENT_STAGE: ${self:provider.stage}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:*'
    - Effect: 'Allow'
      Action:
        - s3:GetObject
        - s3:PutObject
      Resource: 'arn:aws:s3:::api-creator-generated-code-*'
    - Effect: 'Allow'
      Action:
        - ec2:AuthorizeSecurityGroupIngress
        - ec2:CreateSecurityGroup
        - ec2:CreateTags
        - ec2:DescribeInstances
        - ec2:DescribeSecurityGroups
        - ec2:RunInstances
        - ec2:TerminateInstances
      Resource: '*'

custom:
  origin:
    dev: 'http://localhost:3000'
    alpha: 'https://www.crudcreator.com'
  cors:
    origin: ${self:custom.origin.${self:provider.stage}}
    headers:
      - "Content-Type"
      - "X-Amz-Date"
      - "Authorization"
      - "X-Api-Key" 
      - "X-Amz-Security-Token"
    allowCredentials: true

package:
  individually: true
  # exclude:
  #   - ./**
  # include:
  #   - ./bin/**

functions:
  deleteObject:
    handler: deleteobject.HandleDeleteObject
    events:
      - http:
          path: projects/{pid}/objects/{oid}
          method: delete
          cors: ${self:custom.cors}
  deployProject:
    handler: deploy.HandleDeploy
    events:
      - http:
          path: projects/{pid}/deploy
          method: put
          cors: ${self:custom.cors}
  getDownloadURL:
    handler: getdownload.HandleRequest
    events:
      - http:
          path: projects/{pid}/code
          method: get
          cors: ${self:custom.cors}
  getProject:
    handler: getproject.HandleRequest
    events:
      - http:
          path: projects/{pid}
          method: get
          cors: ${self:custom.cors}
          request:
            parameters:
              paths:
                id: true
  getUser:
    handler: getuser.HandleGetUser
    events:
      - http:
          path: user
          method: get
          cors: ${self:custom.cors}
  login:
    handler: portal.HandleLoginRequest
    events:
      - http:
          path: login
          method: put
          cors: ${self:custom.cors}
  logout:
    handler: logout.HandleLogout
    events:
      - http:
          path: logout
          method: put
          cors: ${self:custom.cors}
  putObject:
    handler: putobject.HandlePutObject
    events:
      - http:
          path: projects/{pid}/objects
          method: put
          cors: ${self:custom.cors}
  signup:
    handler: portal.HandleSignupRequest
    events:
      - http:
          path: signup
          method: post
          cors: ${self:custom.cors}
  

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    ApiCreatorTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: Email
            AttributeType: S
        KeySchema:
          - AttributeName: Email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: 'api-creator-${self:provider.stage}'
    ApiCreatorGeneratedCode:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: 'api-creator-generated-code-${self:provider.stage}'
