// Code generated by MockGen. DO NOT EDIT.
// Source: dao/dynamo.go

// Package mock is a generated GoMock package.
package mock

import (
	dynamodb "github.com/aws/aws-sdk-go/service/dynamodb"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDynamoService is a mock of DynamoService interface
type MockDynamoService struct {
	ctrl     *gomock.Controller
	recorder *MockDynamoServiceMockRecorder
}

// MockDynamoServiceMockRecorder is the mock recorder for MockDynamoService
type MockDynamoServiceMockRecorder struct {
	mock *MockDynamoService
}

// NewMockDynamoService creates a new mock instance
func NewMockDynamoService(ctrl *gomock.Controller) *MockDynamoService {
	mock := &MockDynamoService{ctrl: ctrl}
	mock.recorder = &MockDynamoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDynamoService) EXPECT() *MockDynamoServiceMockRecorder {
	return m.recorder
}

// GetItem mocks base method
func (m *MockDynamoService) GetItem(arg0 *dynamodb.GetItemInput) (*dynamodb.GetItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", arg0)
	ret0, _ := ret[0].(*dynamodb.GetItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem
func (mr *MockDynamoServiceMockRecorder) GetItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockDynamoService)(nil).GetItem), arg0)
}

// PutItem mocks base method
func (m *MockDynamoService) PutItem(arg0 *dynamodb.PutItemInput) (*dynamodb.PutItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutItem", arg0)
	ret0, _ := ret[0].(*dynamodb.PutItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutItem indicates an expected call of PutItem
func (mr *MockDynamoServiceMockRecorder) PutItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutItem", reflect.TypeOf((*MockDynamoService)(nil).PutItem), arg0)
}

// UpdateItem mocks base method
func (m *MockDynamoService) UpdateItem(arg0 *dynamodb.UpdateItemInput) (*dynamodb.UpdateItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", arg0)
	ret0, _ := ret[0].(*dynamodb.UpdateItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItem indicates an expected call of UpdateItem
func (mr *MockDynamoServiceMockRecorder) UpdateItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockDynamoService)(nil).UpdateItem), arg0)
}
